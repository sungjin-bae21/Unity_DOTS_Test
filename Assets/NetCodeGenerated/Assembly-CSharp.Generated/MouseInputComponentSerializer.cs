//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Assembly_CSharp.Generated
{
    public struct MouseInputComponentSerializer : ICommandDataSerializer<MouseInputComponent>
    {
        public void Serialize(ref DataStreamWriter writer, in MouseInputComponent data)
        {
            writer.WriteFloat(data.position.x);
            writer.WriteFloat(data.position.y);
            writer.WriteFloat(data.position.z);
            writer.WriteUInt(data.isNew ? 1u : 0);
        }

        public void Deserialize(ref DataStreamReader reader, ref MouseInputComponent data)
        {
            data.position.x = reader.ReadFloat();
            data.position.y = reader.ReadFloat();
            data.position.z = reader.ReadFloat();
            data.isNew = (reader.ReadUInt() != 0) ? true : false;
        }

        public void Serialize(ref DataStreamWriter writer, in MouseInputComponent data, in MouseInputComponent baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedFloatDelta(data.position.x, baseline.position.x, compressionModel);
            writer.WritePackedFloatDelta(data.position.y, baseline.position.y, compressionModel);
            writer.WritePackedFloatDelta(data.position.z, baseline.position.z, compressionModel);
            writer.WritePackedUInt(data.isNew ? 1u : 0, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref MouseInputComponent data, in MouseInputComponent baseline, NetworkCompressionModel compressionModel)
        {
            data.position.x = reader.ReadPackedFloatDelta(baseline.position.x, compressionModel);
            data.position.y = reader.ReadPackedFloatDelta(baseline.position.y, compressionModel);
            data.position.z = reader.ReadPackedFloatDelta(baseline.position.z, compressionModel);
            data.isNew = (reader.ReadPackedUInt(compressionModel) != 0) ? true : false;
        }
    }
    public class MouseInputComponentSendCommandSystem : CommandSendSystem<MouseInputComponentSerializer, MouseInputComponent>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class MouseInputComponentReceiveCommandSystem : CommandReceiveSystem<MouseInputComponentSerializer, MouseInputComponent>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
